// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NevaManagement.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NevaManagement.Infrastructure.Migrations
{
    [DbContext(typeof(NevaManagementDbContext))]
    [Migration("20251007000400_AddLaboratoryMultiTenancy")]
    partial class AddLaboratoryMultiTenancy
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NevaManagement.Domain.Models.Article", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Doi")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.ArticleContainer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ArticleId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContainerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("ContainerId");

                    b.ToTable("ArticleContainer");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.Container", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Creation_Date");

                    b.Property<string>("CultureMedia")
                        .HasColumnType("text")
                        .HasColumnName("Culture_Media");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long?>("Equipment_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("LaboratoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Laboratory_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<long?>("Origin_Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("Researcher_Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("Sub_Container_Id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("TransferDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("TransferDate");

                    b.HasKey("Id");

                    b.HasIndex("Equipment_Id");

                    b.HasIndex("Laboratory_Id");

                    b.HasIndex("Origin_Id");

                    b.HasIndex("Researcher_Id");

                    b.HasIndex("Sub_Container_Id");

                    b.ToTable("Container");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.Equipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("LaboratoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Laboratory_Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("Location_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PropertyNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Laboratory_Id");

                    b.HasIndex("Location_Id");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.EquipmentUsage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EquipmentId")
                        .HasColumnType("bigint");

                    b.Property<long>("LaboratoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Laboratory_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("ResearcherId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("Laboratory_Id");

                    b.HasIndex("ResearcherId");

                    b.ToTable("EquipmentUsage");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.Laboratory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Laboratory");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.LaboratoryInvitation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset?>("AcceptedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("AcceptedById")
                        .HasColumnType("bigint");

                    b.Property<long?>("AcceptedBy_Id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InvitationToken")
                        .HasColumnType("uuid");

                    b.Property<long>("InvitedById")
                        .HasColumnType("bigint");

                    b.Property<long?>("InvitedBy_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("InviteeEmail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("InviteeName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long>("LaboratoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Laboratory_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("AcceptedBy_Id");

                    b.HasIndex("InvitedBy_Id");

                    b.HasIndex("Laboratory_Id");

                    b.ToTable("LaboratoryInvitation");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("LaboratoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Laboratory_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long?>("Sub_Location_Id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Laboratory_Id");

                    b.HasIndex("Sub_Location_Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.Organism", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CollectionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Collection_Date");

                    b.Property<string>("CollectionLocation")
                        .HasColumnType("text")
                        .HasColumnName("Collection_Location");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("IsolationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Isolation_Date");

                    b.Property<long>("LaboratoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Laboratory_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OriginPart")
                        .HasColumnType("text")
                        .HasColumnName("Origin_Part");

                    b.Property<long?>("Origin_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Laboratory_Id");

                    b.HasIndex("Origin_Id");

                    b.ToTable("Organism");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Formula")
                        .HasColumnType("text");

                    b.Property<long>("LaboratoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Laboratory_Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("Location_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Laboratory_Id");

                    b.HasIndex("Location_Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.ProductUsage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<long>("LaboratoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Laboratory_Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("Product_Id")
                        .HasColumnType("bigint");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<long?>("Researcher_Id")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("UsageDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Usage_Date");

                    b.HasKey("Id");

                    b.HasIndex("Laboratory_Id");

                    b.HasIndex("Product_Id");

                    b.HasIndex("Researcher_Id");

                    b.ToTable("ProductUsage");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.Researcher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<long>("LaboratoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Laboratory_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Laboratory_Id");

                    b.ToTable("Researcher");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.ArticleContainer", b =>
                {
                    b.HasOne("NevaManagement.Domain.Models.Article", "Article")
                        .WithMany("ArticleContainerList")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NevaManagement.Domain.Models.Container", "Container")
                        .WithMany("ArticleContainerList")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Container");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.Container", b =>
                {
                    b.HasOne("NevaManagement.Domain.Models.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("Equipment_Id");

                    b.HasOne("NevaManagement.Domain.Models.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("Laboratory_Id");

                    b.HasOne("NevaManagement.Domain.Models.Organism", "Origin")
                        .WithMany()
                        .HasForeignKey("Origin_Id");

                    b.HasOne("NevaManagement.Domain.Models.Researcher", "Researcher")
                        .WithMany()
                        .HasForeignKey("Researcher_Id");

                    b.HasOne("NevaManagement.Domain.Models.Container", "SubContainer")
                        .WithMany()
                        .HasForeignKey("Sub_Container_Id");

                    b.Navigation("Equipment");

                    b.Navigation("Laboratory");

                    b.Navigation("Origin");

                    b.Navigation("Researcher");

                    b.Navigation("SubContainer");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.Equipment", b =>
                {
                    b.HasOne("NevaManagement.Domain.Models.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("Laboratory_Id");

                    b.HasOne("NevaManagement.Domain.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("Location_Id");

                    b.Navigation("Laboratory");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.EquipmentUsage", b =>
                {
                    b.HasOne("NevaManagement.Domain.Models.Equipment", "Equipment")
                        .WithMany("EquipmentUsages")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NevaManagement.Domain.Models.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("Laboratory_Id");

                    b.HasOne("NevaManagement.Domain.Models.Researcher", "Researcher")
                        .WithMany("EquipmentUsages")
                        .HasForeignKey("ResearcherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("Laboratory");

                    b.Navigation("Researcher");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.LaboratoryInvitation", b =>
                {
                    b.HasOne("NevaManagement.Domain.Models.Researcher", "AcceptedBy")
                        .WithMany()
                        .HasForeignKey("AcceptedBy_Id");

                    b.HasOne("NevaManagement.Domain.Models.Researcher", "InvitedBy")
                        .WithMany()
                        .HasForeignKey("InvitedBy_Id");

                    b.HasOne("NevaManagement.Domain.Models.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("Laboratory_Id");

                    b.Navigation("AcceptedBy");

                    b.Navigation("InvitedBy");

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.Location", b =>
                {
                    b.HasOne("NevaManagement.Domain.Models.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("Laboratory_Id");

                    b.HasOne("NevaManagement.Domain.Models.Location", "SubLocation")
                        .WithMany()
                        .HasForeignKey("Sub_Location_Id");

                    b.Navigation("Laboratory");

                    b.Navigation("SubLocation");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.Organism", b =>
                {
                    b.HasOne("NevaManagement.Domain.Models.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("Laboratory_Id");

                    b.HasOne("NevaManagement.Domain.Models.Organism", "Origin")
                        .WithMany()
                        .HasForeignKey("Origin_Id");

                    b.Navigation("Laboratory");

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.Product", b =>
                {
                    b.HasOne("NevaManagement.Domain.Models.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("Laboratory_Id");

                    b.HasOne("NevaManagement.Domain.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("Location_Id");

                    b.Navigation("Laboratory");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.ProductUsage", b =>
                {
                    b.HasOne("NevaManagement.Domain.Models.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("Laboratory_Id");

                    b.HasOne("NevaManagement.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("Product_Id");

                    b.HasOne("NevaManagement.Domain.Models.Researcher", "Researcher")
                        .WithMany()
                        .HasForeignKey("Researcher_Id");

                    b.Navigation("Laboratory");

                    b.Navigation("Product");

                    b.Navigation("Researcher");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.Researcher", b =>
                {
                    b.HasOne("NevaManagement.Domain.Models.Laboratory", "Laboratory")
                        .WithMany()
                        .HasForeignKey("Laboratory_Id");

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.Article", b =>
                {
                    b.Navigation("ArticleContainerList");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.Container", b =>
                {
                    b.Navigation("ArticleContainerList");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.Equipment", b =>
                {
                    b.Navigation("EquipmentUsages");
                });

            modelBuilder.Entity("NevaManagement.Domain.Models.Researcher", b =>
                {
                    b.Navigation("EquipmentUsages");
                });
#pragma warning restore 612, 618
        }
    }
}
